{
  "name": "neo4j-supervisor",
  "version": "0.1.1",
  "description": "manage a neo4j server installation",
  "main": "neosv.js",
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha -s 500 -t 360000 -R spec"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jonpacker/neo4j-supervisor.git"
  },
  "author": {
    "name": "Jon Packer"
  },
  "license": "BSD",
  "devDependencies": {
    "mocha": "~1.7.3",
    "neo4j-vm": "~0.1.2",
    "async": "~0.1.22",
    "seraph": "~0.4.0"
  },
  "dependencies": {
    "naan": "~1.3.10",
    "rimraf": "~2.1.4",
    "async": "~0.2.6"
  },
  "readme": "# neo4j-supervisor\n\nmanage a neo4j server installation\n\n## install\n\n```\nnpm install neo4j-supervisor\n```\n\n## example\n\n```\nvar supervise = require('neo4j-supervisor');\nvar neo = supervise('/potato/neo4j');\n\nneo.clean(function(err) { ... }); // purge all data from the database\nneo.running(function(yep) { ... }); // check if instance is running\nneo.start(function() { ... }); // start an instance\n//... etc - see below for a list of available functions\n```\n\n### portability\n\ndoesn't work on windows. :~~[\n\n## functions\n\n**all the callbacks are in the format `function(err, output)` unless otherwise\nspecified**\n\n* **neo.clean(cb)** - purge all data from the database. this is rather forceful - it\n  physically wipes that data from the disk. therefore I don't suggest trying it\n  while the server is running. (but if you feel like trying it, go ahead! i\n  won't stop you.)\n* **neo.running(cb)** - check if the server is running. callback is given one arg,\n  a boolean that's set to true if the server is running\n* **neo.start(cb)** - start the server\n* **neo.stop(cb)** - stop the server\n* **neo.restart(cb)** - restart the server\n* **neo.config([key], [value], cb)** - either get all of the server's\n  configuration values (as an obj), or a single key, or set a value, depending\n  on which args are passed (key and value are optional).\n* **neo.port([port], cb)** - if `port` is specified, set the port of the server\n  to `port`. otherwise, get the port of the server.\n* **neo.host([host], cb)** - same as `port`, but with hostname.\n* **neo.pid(cb)** - find the pid of the server or null\n* **neo.endpoint(cb)** - get the endpoint configuration of the server. calls\n\tback with an object containing `server`—the location of the server with\n  protocol and port, and `endpoint`—the path of the api endpoint on top of\n\t`server`. this conveniently fits straight into [seraph](http://www.github.com/brikteknologier/seraph).\n",
  "_id": "neo4j-supervisor@0.1.1",
  "dist": {
    "shasum": "0c73c0211b82e5c8b7b60ec016fae5093f54bb12",
    "tarball": "http://registry.npmjs.org/neo4j-supervisor/-/neo4j-supervisor-0.1.1.tgz"
  },
  "_npmVersion": "1.1.62",
  "_npmUser": {
    "name": "jonpacker",
    "email": "contact@jonpacker.com"
  },
  "maintainers": [
    {
      "name": "jonpacker",
      "email": "contact@jonpacker.com"
    }
  ],
  "directories": {},
  "_shasum": "0c73c0211b82e5c8b7b60ec016fae5093f54bb12",
  "_resolved": "https://registry.npmjs.org/neo4j-supervisor/-/neo4j-supervisor-0.1.1.tgz",
  "_from": "neo4j-supervisor@>=0.1.1 <0.2.0",
  "bugs": {
    "url": "https://github.com/jonpacker/neo4j-supervisor/issues"
  },
  "homepage": "https://github.com/jonpacker/neo4j-supervisor"
}
